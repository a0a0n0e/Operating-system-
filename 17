#include <stdio.h>

#define NUM_PROCESSES 5
#define NUM_RESOURCES 3

int max[NUM_PROCESSES][NUM_RESOURCES] = {
    {7, 5, 3},
    {3, 2, 2},
    {9, 0, 2},
    {2, 2, 2},
    {4, 3, 3}
};

int allocation[NUM_PROCESSES][NUM_RESOURCES] = {
    {0, 1, 0},
    {2, 0, 0},
    {3, 0, 2},
    {2, 1, 1},
    {0, 0, 2}
};

int available[NUM_RESOURCES] = {3, 3, 2};

int need[NUM_PROCESSES][NUM_RESOURCES];

int finish[NUM_PROCESSES];

int isSafe() {
    for (int i = 0; i < NUM_PROCESSES; i++) {
        finish[i] = 0;
    }

    int work[NUM_RESOURCES];
    for (int i = 0; i < NUM_RESOURCES; i++) {
        work[i] = available[i];
    }

    int sequence[NUM_PROCESSES];
    int count = 0;

    while (count < NUM_PROCESSES) {
        int found = 0;
        for (int i = 0; i < NUM_PROCESSES; i++) {
            if (finish[i] == 0) {
                int j;
                for (j = 0; j < NUM_RESOURCES; j++) {
                    if (need[i][j] > work[j])
                        break;
                }
                if (j == NUM_RESOURCES) {
                    for (j = 0; j < NUM_RESOURCES; j++) {
                        work[j] += allocation[i][j];
                    }
                    sequence[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (found == 0) {
            return 0; // System is not in a safe state
        }
    }
    printf("Safe Sequence: ");
    for (int i = 0; i < NUM_PROCESSES - 1; i++) {
        printf("P%d -> ", sequence[i]);
    }
    printf("P%d\n", sequence[NUM_PROCESSES - 1]);
    return 1; // System is in a safe state
}

int main() {
    for (int i = 0; i < NUM_PROCESSES; i++) {
        for (int j = 0; j < NUM_RESOURCES; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    if (isSafe()) {
        printf("The system is in a safe state.\n");
    } else {
        printf("The system is not in a safe state, and there may be a deadlock.\n");
    }

    return 0;
}
