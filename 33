#include <stdio.h>
#include <stdbool.h>

#define MEMORY_SIZE 3
#define PAGE_REFERENCES 12

int memory[MEMORY_SIZE];
int page_references[PAGE_REFERENCES] = {2, 3, 2, 1, 5, 2, 4, 5, 3, 2, 5, 2};
int page_faults = 0;

bool isPageInMemory(int page) {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i] == page) {
            return true;
        }
    }
    return false;
}

int findOptimalPage(int startIndex) {
    int farthest = -1;
    int farthestIndex = -1;

    for (int i = 0; i < MEMORY_SIZE; i++) {
        int page = memory[i];
        int nextIndex = startIndex + 1;

        while (nextIndex < PAGE_REFERENCES) {
            if (page_references[nextIndex] == page) {
                if (nextIndex > farthest) {
                    farthest = nextIndex;
                    farthestIndex = i;
                }
                break;
            }
            nextIndex++;
        }

        if (nextIndex == PAGE_REFERENCES) {
            // If a page is not referenced in the future, it's the best choice.
            return i;
        }
    }

    return farthestIndex;
}

int main() {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        memory[i] = -1;
    }

    for (int i = 0; i < PAGE_REFERENCES; i++) {
        int page = page_references[i];

        if (!isPageInMemory(page)) {
            page_faults++;
            int indexToReplace = findOptimalPage(i);
            memory[indexToReplace] = page;
        }
    }

    printf("Total Page Faults: %d\n", page_faults);

    return 0;
}

