#include <stdio.h>

#define MEMORY_SIZE 4
#define PAGE_REFERENCES 12

int memory[MEMORY_SIZE];
int page_queue[MEMORY_SIZE];
int page_queue_front = 0;
int page_queue_rear = 0;

void initializeMemory() {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        memory[i] = -1;
    }
}

void addToQueue(int page) {
    if (page_queue_rear < MEMORY_SIZE) {
        page_queue[page_queue_rear++] = page;
    }
}

int replacePage(int page) {
    int replaced_page = page_queue[page_queue_front];
    page_queue[page_queue_front] = page;
    page_queue_front = (page_queue_front + 1) % MEMORY_SIZE;
    return replaced_page;
}

int findPage(int page) {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i] == page) {
            return i;
        }
    }
    return -1;
}

void displayMemory() {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        printf("%d ", memory[i]);
    }
    printf("\n");
}

int main() {
    int page_references[] = {2, 3, 2, 1, 5, 2, 4, 5, 3, 2, 5, 2};
    initializeMemory();

    int page_faults = 0;
    for (int i = 0; i < PAGE_REFERENCES; i++) {
        int page = page_references[i];

        if (findPage(page) == -1) {
            int replaced_page = replacePage(page);
            memory[findPage(replaced_page)] = page;
            page_faults++;
            addToQueue(page);
        }

        displayMemory();
    }

    printf("Total Page Faults: %d\n", page_faults);

    return 0;
}
