#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_READERS 3
#define NUM_WRITERS 2

int data = 0;
int readers_count = 0;
sem_t mutex, writeMutex, readMutex;

void *reader(void *arg) {
    int id = *(int *)arg;
    while (1) {
        sem_wait(&readMutex);
        sem_wait(&mutex);
        readers_count++;
        if (readers_count == 1) {
            sem_wait(&writeMutex);
        }
        sem_post(&mutex);
        sem_post(&readMutex);
        
        // Reading
        printf("Reader %d reads data: %d\n", id, data);
        
        sem_wait(&mutex);
        readers_count--;
        if (readers_count == 0) {
            sem_post(&writeMutex);
        }
        sem_post(&mutex);
        
        sleep(1); // Simulate reading time
    }
    return NULL;
}

void *writer(void *arg) {
    int id = *(int *)arg;
    while (1) {
        sem_wait(&writeMutex);
        
        // Writing
        data++;
        printf("Writer %d writes data: %d\n", id, data);
        
        sem_post(&writeMutex);
        
        sleep(1); // Simulate writing time
    }
    return NULL;
}

int main() {
    sem_init(&mutex, 0, 1);
    sem_init(&writeMutex, 0, 1);
    sem_init(&readMutex, 0, 1);

    pthread_t reader_threads[NUM_READERS];
    pthread_t writer_threads[NUM_WRITERS];

    int reader_ids[NUM_READERS];
    int writer_ids[NUM_WRITERS];

    for (int i = 0; i < NUM_READERS; i++) {
        reader_ids[i] = i;
        pthread_create(&reader_threads[i], NULL, reader, &reader_ids[i]);
    }
    for (int i = 0; i < NUM_WRITERS; i++) {
        writer_ids[i] = i;
        pthread_create(&writer_threads[i], NULL, writer, &writer_ids[i]);
    }

    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(reader_threads[i], NULL);
    }
    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writer_threads[i], NULL);
    }

    sem_destroy(&mutex);
    sem_destroy(&writeMutex);
    sem_destroy(&readMutex);

    return 0;
}
